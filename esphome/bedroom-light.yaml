# Basic Config
substitutions:
  lowercase_name: bedroom-light
  friendly_name: Bedroom
  static_ip: 10.10.1.66

esphome:
  name: ${lowercase_name}
  friendly_name: ${friendly_name}
  includes:
    - relay_dimmer.h
  on_shutdown:
    then:
      - light.turn_off: dimmer

globals:
 - id: lastSwitchTime
   type: unsigned long
   restore_value: no
   initial_value: millis()
 - id: dimmer_lvl
   # https://esphome.io/guides/automations.html#bonus-2-global-variables
   type: float
   restore_value: no
   initial_value: '1.0'

esp8266:
  board: esp12e
  framework:
    version: recommended
  restore_from_flash: true

# Enable logging
logger:

# Enable Home Assistant API
api:
  reboot_timeout: 0s
  encryption:
    key: !secret api_pass

ota:
  password: !secret ota_pass

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  #Use this if you are changing the IP address to something different
  #use_address: 10.10.0.152

  manual_ip:
    # Set this to the IP of the ESP
    static_ip: ${static_ip}
    # Set this to the IP address of the router. Often ends with .1
    gateway: !secret wifigateway
    # The subnet of the network. 255.255.255.0 works for most home networks.
    subnet: !secret wifisubnet

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${lowercase_name}
    password: !secret ap-pass

captive_portal:

web_server:
  port: 80


light:
  - platform: monochromatic
    output: relay_dimmer
    name: light
    gamma_correct: 1
    default_transition_length: 0s
    id: dimmer
  

output:
  - platform: custom
    type: float
    lambda: |-
      auto relay_dimmer_output = new MyCustomFloatOutput();
      App.register_component(relay_dimmer_output);
      return {relay_dimmer_output};
    outputs:
      id: relay_dimmer

binary_sensor:
  - platform: gpio
    pin: 
      number: 4
      mode: input
    id: spst_switch
    # internal: true
    #filters:
      #- delayed_off: 100ms
      #- delayed_on_off: 100ms
    on_press:
      then:
        - logger.log: "GPIO4 1"
    on_release:
      then:
        - logger.log: "GPIO4 0"
    on_multi_click:
    - timing:
        - ON for at most 600ms
      then:
        - script.execute: toggle_script
    - timing:
        - OFF for at most 600ms
      then:
        - script.execute: toggle_script
    - timing:
        - OFF for at least 600ms
      then:
        - script.execute: switch_script
    - timing:
        - ON for at least 600ms
      then:
        - script.execute: switch_script
        

script:
  - id: toggle_script
    then:
      - lambda: 'id(lastSwitchTime) = millis();'
      - if:
          condition:
            lambda: 'return id(dimmer)->remote_values.get_brightness() > 0.84;'
          then:
            - light.turn_on:
                id: dimmer
                brightness: 0.16
          else:
            - light.dim_relative:
                id: dimmer
                relative_brightness: 0.16
      - logger.log: "Toggle"
  - id: switch_script
    then:
      - if:
          condition:
            lambda: 'return (millis() - id(lastSwitchTime)) > 700;'
          then:
            - logger.log: "Switch"
            - light.toggle: dimmer